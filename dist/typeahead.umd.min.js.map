{"version":3,"file":"typeahead.umd.min.js","sources":["../node_modules/bind-decorator/index.js","../src/accessor.ts","../node_modules/classnames/index.js","../src/typeahead/option.tsx","../src/typeahead/selector.tsx","../src/keyevent.ts","../node_modules/fuzzy/lib/fuzzy.js","../src/typeahead/index.tsx","../src/tokenizer/token.tsx","../src/tokenizer/index.tsx"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants;\n(function (constants) {\n    constants.typeOfFunction = 'function';\n    constants.boolTrue = true;\n})(constants || (constants = {}));\nfunction bind(target, propertyKey, descriptor) {\n    if (!descriptor || (typeof descriptor.value !== constants.typeOfFunction)) {\n        throw new TypeError(\"Only methods can be decorated with @bind. <\" + propertyKey + \"> is not a method!\");\n    }\n    return {\n        configurable: constants.boolTrue,\n        get: function () {\n            var bound = descriptor.value.bind(this);\n            // Credits to https://github.com/andreypopp/autobind-decorator for memoizing the result of bind against a symbol on the instance.\n            Object.defineProperty(this, propertyKey, {\n                value: bound,\n                configurable: constants.boolTrue,\n                writable: constants.boolTrue\n            });\n            return bound;\n        }\n    };\n}\nexports.bind = bind;\nexports.default = bind;\n","export default class Accessor {\n  // tslint:disable-next-line\n  static IDENTITY_FN<T>(input: T): T { return input; }\n\n  static generateAccessor(field: string) {\n    return (object: { [propName: string]: any }) => object[field];\n  }\n\n  static generateOptionToStringFor(prop?: string | Function) {\n    if (typeof prop === 'string') {\n      return Accessor.generateAccessor(prop);\n    } \n    \n    if (typeof prop === 'function') {\n      return prop;\n    }\n    \n    return Accessor.IDENTITY_FN;\n  }\n\n  static valueForOption<T>(\n    option: string | ((arg: T) => string), \n    object: T,\n  ): string | void {\n    if (typeof option === 'string') {\n      if (typeof object !== 'object') throw new Error(`Invalid object type ${typeof object}`);\n      // @ts-ignore\n      return object[option];\n    } \n    \n    if (typeof option === 'function') {\n      return option(object);\n    }\n\n    if (typeof object === 'string') {\n      return object;\n    }\n    \n    throw new Error(`Invalid object type ${typeof object}`);\n  }\n}\n","/*!\n  Copyright (c) 2016 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tclasses.push(classNames.apply(null, arg));\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import * as React from 'react';\nimport classNames from 'classnames';\n\nexport interface CustomClasses {\n  listItem?: string;\n  hover?: string;\n  customAdd?: string;\n  listAnchor?: string;\n}\n\nexport interface Props {\n  customClasses?: CustomClasses;\n  customValue?: string;\n  onClick: Function;\n  children: React.ReactNode;\n  hover?: boolean;\n}\n\n/**\n * A single option within the TypeaheadSelector\n */\nclass TypeaheadOption extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  private getProps() {\n    const customClasses: CustomClasses = { hover: 'hover' };\n    return {\n      ...{\n        customClasses,\n        onClick: (event: React.MouseEvent<HTMLDivElement>) => {\n          event.preventDefault();\n        },\n        hover: false,\n      },\n      ...this.props,\n    };\n  }\n\n  render() {\n    const { \n      customClasses, hover,\n      children, customValue,\n     } = this.getProps();\n\n    const classes: any = {};\n    const { listItem, hover: hoverClass = 'hover', customAdd } = customClasses;\n    classes[hoverClass] = Boolean(hover);\n    if (listItem) {\n      classes[listItem] = Boolean(listItem);\n    }\n\n    if (customValue && customAdd) {\n      classes[customAdd] = Boolean(customAdd);\n    }\n\n    const classList = classNames(classes);\n\n    // For some reason onClick is not fired when clicked on an option\n    // onMouseDown is used here as a workaround of #205 and other\n    // related tickets\n    return (\n      <li className={classList} onClick={this.onClick} onMouseDown={this.onClick}>\n        <a \n          href=\"javascript: void 0;\" \n          className={this.getClasses()} \n        >\n          {children}\n        </a>\n      </li>\n    );\n  }\n\n  getClasses() {\n    const { customClasses } = this.getProps();\n    const classes: any = {\n      'typeahead-option': true,\n    };\n    const { listAnchor } = customClasses;\n    if (listAnchor) {\n      classes[listAnchor] = true;\n    }\n\n    return classNames(classes);\n  }\n\n  onClick(event: React.MouseEvent<HTMLLIElement>) {\n    event.preventDefault();\n    return this.props.onClick(event);\n  }\n}\n\nexport default TypeaheadOption;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport TypeaheadOption from './option';\nimport { CustomClasses, OptionSelector } from '../types';\n\nexport interface Props {\n  options: string[];\n  allowCustomValues?: number;\n  customClasses?: CustomClasses;\n  customValue?: string;\n  selectionIndex?: number;\n  onOptionSelected?: OptionSelector;\n  displayOption: Function;\n  defaultClassNames?: boolean;\n  areResultsTruncated?: boolean;\n  resultsTruncatedMessage?: string;\n  innerRef?: ((c: HTMLElement) => void);\n}\n\n/**\n * Container for the options rendered as part of the autocompletion process\n * of the typeahead\n */\nclass TypeaheadSelector extends React.Component<Props> {\n  // Hack to handle the buggy typescript defaultProps\n  private getProps() {\n    const customClasses: CustomClasses = {};\n    return {\n      ...{\n        customClasses,\n        allowCustomValues: 0,\n        onOptionSelected: () => {},\n        defaultClassNames: true,\n      },\n      ...this.props,\n    };\n  }\n\n  render() {\n    const { \n      options, customClasses, customValue, displayOption,\n      defaultClassNames, allowCustomValues, selectionIndex,\n      areResultsTruncated, resultsTruncatedMessage,\n    } = this.getProps();\n    // Don't render if there are no options to display\n    if (!options.length && allowCustomValues <= 0) {\n      return false;\n    }\n\n    const classes: any = {\n      'typeahead-selector': defaultClassNames,\n    };\n    const { results: resClass } = customClasses;\n    if (resClass) {\n      classes[resClass] = true;\n    }\n    const classList = classNames(classes);\n\n    // CustomValue should be added to top of results list with different class name\n    let customValueComponent;\n    let customValueOffset = 0;\n    if (customValue) {\n      customValueOffset += 1;\n      // TODO: needed ref? ref={customValue} \n      customValueComponent = (\n        <TypeaheadOption \n          key={customValue}\n          hover={selectionIndex === 0}\n          customClasses={customClasses}\n          customValue={customValue}\n          onClick={this.onClick.bind(this, customValue)}\n        >\n          {customValue}\n        </TypeaheadOption>\n      );\n    }\n\n    const results = options.map((result, i) => {\n      const displayString = displayOption(result, i);\n      const uniqueKey = displayString + '_' + i;\n      // TODO: needed ref? ref={uniqueKey} \n      return (\n        <TypeaheadOption \n          key={uniqueKey}\n          hover={selectionIndex === i + customValueOffset}\n          customClasses={customClasses}\n          onClick={this.onClick.bind(this, result)}\n        >\n          {displayString}\n        </TypeaheadOption>\n      );\n    });\n\n    if (areResultsTruncated && resultsTruncatedMessage) {\n      const resultsTruncatedClasses: any = {\n        'results-truncated': defaultClassNames,\n      };\n      const { resultsTruncated } = customClasses;\n      if (resultsTruncated) {\n        resultsTruncatedClasses[resultsTruncated] = true;\n      }\n      const resultsTruncatedClassList = classNames(resultsTruncatedClasses);\n\n      results.push(\n        <li key=\"results-truncated\" className={resultsTruncatedClassList}>\n          {this.props.resultsTruncatedMessage}\n        </li>);\n    }\n\n    return (\n      <ul className={classList}>\n        {customValueComponent}\n        {results}\n      </ul>\n    );\n  }\n\n  private onClick(result: string, event: React.MouseEvent<HTMLDivElement>) {\n    const { onOptionSelected } = this.props;\n    if (!onOptionSelected) return;\n\n    return onOptionSelected(result, event);\n  }\n}\n\nexport default TypeaheadSelector;\n","/**\n * PolyFills make me sad\n */\n// @ts-ignore\nconst KeyEvent: { [propName: string]: number } = KeyEvent || {};\nKeyEvent.DOM_VK_UP = KeyEvent.DOM_VK_UP || 38;\nKeyEvent.DOM_VK_DOWN = KeyEvent.DOM_VK_DOWN || 40;\nKeyEvent.DOM_VK_BACK_SPACE = KeyEvent.DOM_VK_BACK_SPACE || 8;\nKeyEvent.DOM_VK_RETURN = KeyEvent.DOM_VK_RETURN || 13;\nKeyEvent.DOM_VK_ENTER = KeyEvent.DOM_VK_ENTER || 14;\nKeyEvent.DOM_VK_ESCAPE = KeyEvent.DOM_VK_ESCAPE || 27;\nKeyEvent.DOM_VK_TAB = KeyEvent.DOM_VK_TAB || 9;\n\nexport default KeyEvent;\n","/*\n * Fuzzy\n * https://github.com/myork/fuzzy\n *\n * Copyright (c) 2012 Matt York\n * Licensed under the MIT license.\n */\n\n(function() {\n\nvar root = this;\n\nvar fuzzy = {};\n\n// Use in node or in browser\nif (typeof exports !== 'undefined') {\n  module.exports = fuzzy;\n} else {\n  root.fuzzy = fuzzy;\n}\n\n// Return all elements of `array` that have a fuzzy\n// match against `pattern`.\nfuzzy.simpleFilter = function(pattern, array) {\n  return array.filter(function(str) {\n    return fuzzy.test(pattern, str);\n  });\n};\n\n// Does `pattern` fuzzy match `str`?\nfuzzy.test = function(pattern, str) {\n  return fuzzy.match(pattern, str) !== null;\n};\n\n// If `pattern` matches `str`, wrap each matching character\n// in `opts.pre` and `opts.post`. If no match, return null\nfuzzy.match = function(pattern, str, opts) {\n  opts = opts || {};\n  var patternIdx = 0\n    , result = []\n    , len = str.length\n    , totalScore = 0\n    , currScore = 0\n    // prefix\n    , pre = opts.pre || ''\n    // suffix\n    , post = opts.post || ''\n    // String to compare against. This might be a lowercase version of the\n    // raw string\n    , compareString =  opts.caseSensitive && str || str.toLowerCase()\n    , ch;\n\n  pattern = opts.caseSensitive && pattern || pattern.toLowerCase();\n\n  // For each character in the string, either add it to the result\n  // or wrap in template if it's the next string in the pattern\n  for(var idx = 0; idx < len; idx++) {\n    ch = str[idx];\n    if(compareString[idx] === pattern[patternIdx]) {\n      ch = pre + ch + post;\n      patternIdx += 1;\n\n      // consecutive characters should increase the score more than linearly\n      currScore += 1 + currScore;\n    } else {\n      currScore = 0;\n    }\n    totalScore += currScore;\n    result[result.length] = ch;\n  }\n\n  // return rendered string if we have a match for every char\n  if(patternIdx === pattern.length) {\n    // if the string is an exact match with pattern, totalScore should be maxed\n    totalScore = (compareString === pattern) ? Infinity : totalScore;\n    return {rendered: result.join(''), score: totalScore};\n  }\n\n  return null;\n};\n\n// The normal entry point. Filters `arr` for matches against `pattern`.\n// It returns an array with matching values of the type:\n//\n//     [{\n//         string:   '<b>lah' // The rendered string\n//       , index:    2        // The index of the element in `arr`\n//       , original: 'blah'   // The original element in `arr`\n//     }]\n//\n// `opts` is an optional argument bag. Details:\n//\n//    opts = {\n//        // string to put before a matching character\n//        pre:     '<b>'\n//\n//        // string to put after matching character\n//      , post:    '</b>'\n//\n//        // Optional function. Input is an entry in the given arr`,\n//        // output should be the string to test `pattern` against.\n//        // In this example, if `arr = [{crying: 'koala'}]` we would return\n//        // 'koala'.\n//      , extract: function(arg) { return arg.crying; }\n//    }\nfuzzy.filter = function(pattern, arr, opts) {\n  if(!arr || arr.length === 0) {\n    return [];\n  }\n  if (typeof pattern !== 'string') {\n    return arr;\n  }\n  opts = opts || {};\n  return arr\n    .reduce(function(prev, element, idx, arr) {\n      var str = element;\n      if(opts.extract) {\n        str = opts.extract(element);\n      }\n      var rendered = fuzzy.match(pattern, str, opts);\n      if(rendered != null) {\n        prev[prev.length] = {\n            string: rendered.rendered\n          , score: rendered.score\n          , index: idx\n          , original: element\n        };\n      }\n      return prev;\n    }, [])\n\n    // Sort by score. Browsers are inconsistent wrt stable/unstable\n    // sorting, so force stable by using the index in the case of tie.\n    // See http://ofb.net/~sethml/is-sort-stable.html\n    .sort(function(a,b) {\n      var compare = b.score - a.score;\n      if(compare) return compare;\n      return a.index - b.index;\n    });\n};\n\n\n}());\n\n","import * as React from 'react';\nimport bind from 'bind-decorator';\nimport Accessor from '../accessor';\nimport TypeaheadSelector, { Props as TypelistProps } from './selector';\nimport KeyEvent from '../keyevent';\nimport fuzzy, { FilterOptions } from 'fuzzy';\nimport classNames from 'classnames';\nimport { CustomClasses } from '../types';\nimport { Input, InputProps } from 'reactstrap';\n\nexport interface Props extends InputProps {\n  name?: string;\n  customClasses?: CustomClasses;\n  maxVisible?: number;\n  resultsTruncatedMessage?: string;\n  options: string[];\n  allowCustomValues?: number;\n  initialValue?: string;\n  value?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  textarea?: boolean;\n  inputProps?: object;\n  onOptionSelected?: Function;\n  filterOption?: string | Function;\n  searchOptions?: Function;\n  displayOption?: string | Function;\n  inputDisplayOption?: string | Function;\n  formInputOption?: string | Function;\n  defaultClassNames?: boolean;\n  customListComponent?: React.Component<TypelistProps>;\n  showOptionsWhenEmpty?: boolean;\n  innerRef?: (c: HTMLInputElement) => any;\n}\n\nexport interface State {\n  // The options matching the entry value\n  searchResults: string[];\n\n  // This should be called something else, \"entryValue\"\n  entryValue: string;\n\n  // A valid typeahead value\n  selection?: string;\n\n  // Index of the selection\n  selectionIndex?: number;\n\n  // Keep track of the focus state of the input element, to determine\n  // whether to show options when empty (if showOptionsWhenEmpty is true)\n\n  isFocused: boolean;\n  // true when focused, false onOptionSelected\n  showResults: boolean;\n}\n\n/**\n * A \"typeahead\", an auto-completing text input\n *\n * Renders an text input that shows options nearby that you can use the\n * keyboard or mouse to select.  Requires CSS for MASSIVE DAMAGE.\n */\nclass Typeahead extends React.Component<Props, State>{\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      // The options matching the entry value\n      searchResults: this.getOptionsForValue(props.initialValue, props.options),\n\n      // This should be called something else, \"entryValue\"\n      entryValue: props.value || '',\n\n      // A valid typeahead value\n      selection: props.value,\n\n      // Index of the selection\n      selectionIndex: undefined,\n\n      // Keep track of the focus state of the input element, to determine\n      // whether to show options when empty (if showOptionsWhenEmpty is true)\n      isFocused: false,\n\n      // true when focused, false onOptionSelected\n      showResults: false,\n    };\n  }\n\n  public inputElement?: HTMLInputElement;\n\n  // Hack due to buggy defaultprops handling in typescript\n  private getProps() {\n    const customClasses: CustomClasses = {};\n    return {\n      ...{\n        customClasses,\n        allowCustomValues: 0,\n        initialValue: '',\n        value: '',\n        disabled: false,\n        textarea: false,\n        customListComponent: TypeaheadSelector,\n        showOptionsWhenEmpty: false,\n      },\n      ...this.props,\n    };\n  }\n\n  private shouldSkipSearch(input?: string) {\n    const emptyValue = !input || input.trim().length === 0;\n\n    // this.state must be checked because it may not be defined yet if this function\n    // is called from within getInitialState\n    const isFocused = this.state && this.state.isFocused;\n    return !(this.props.showOptionsWhenEmpty && isFocused) && emptyValue;\n  }\n\n  getOptionsForValue(value?: string, options?: string[]) {\n    if (this.shouldSkipSearch(value)) { return []; }\n\n    const searchOptions = this.generateSearchFunction();\n    return searchOptions(value, options);\n  }\n\n  setEntryText(value: string) {\n    if (!this.inputElement) return;\n    this.inputElement.value = value;\n    this.onTextEntryUpdated( );\n  }\n\n  @bind\n  focus() {\n    if (!this.inputElement) return;\n    this.inputElement.focus();\n  }\n\n  private hasCustomValue() {\n    const { allowCustomValues } = this.getProps();\n    const { entryValue, searchResults } = this.state;\n    \n    return (\n      allowCustomValues && \n      allowCustomValues > 0 &&\n      entryValue.length >= allowCustomValues &&\n      searchResults.indexOf(this.state.entryValue) < 0);\n  }\n\n  private getCustomValue() {\n    if (this.hasCustomValue()) {\n      return this.state.entryValue;\n    }\n    return undefined;\n  }\n\n  selectElement?: HTMLElement;\n  private renderIncrementalSearchResults() {\n    const { entryValue, selection, searchResults, selectionIndex } = this.state;\n    const {\n      // @ts-ignore\n      maxVisible, resultsTruncatedMessage, customListComponent, \n      allowCustomValues, customClasses, defaultClassNames,\n    } = this.getProps();\n\n    // Nothing has been entered into the textbox\n    if (this.shouldSkipSearch(entryValue)) {\n      return '';\n    }\n\n    // Something was just selected\n    if (selection) {\n      return '';\n    }\n\n    const truncated: boolean = Boolean(maxVisible && searchResults.length > maxVisible);\n    return (\n      // @ts-ignore\n      <TypeaheadSelector\n        innerRef={(c: HTMLElement) => this.selectElement = c}\n        options={maxVisible ? searchResults.slice(0, maxVisible) : searchResults}\n        areResultsTruncated={truncated}\n        resultsTruncatedMessage={resultsTruncatedMessage}\n        onOptionSelected={this.onOptionSelected}\n        allowCustomValues={allowCustomValues}\n        customValue={this.getCustomValue()}\n        customClasses={customClasses}\n        selectionIndex={selectionIndex}\n        defaultClassNames={defaultClassNames}\n        displayOption={Accessor.generateOptionToStringFor(this.props.displayOption)} \n      />\n    );\n  }\n\n  getSelection() {\n    let index = this.state.selectionIndex;\n    if (index === undefined) throw new Error('No index set');\n    if (this.hasCustomValue()) {\n      if (index === 0) {\n        return this.state.entryValue;\n      }\n      index -= 1;\n    }\n    return this.state.searchResults[index];\n  }\n\n  @bind\n  private onOptionSelected(option: string, event: React.SyntheticEvent<any>) {\n    if (!this.inputElement) throw new Error('No input element');\n    this.inputElement.focus();\n\n    let { displayOption, formInputOption } = this.getProps();\n    displayOption = Accessor\n      .generateOptionToStringFor(this.props.inputDisplayOption || displayOption);\n    const optionString = displayOption(option, 0);\n\n    formInputOption = Accessor.generateOptionToStringFor(formInputOption || displayOption);\n    const formInputOptionString = formInputOption(option);\n\n    this.inputElement.value = optionString;\n    this.setState({\n      searchResults: this.getOptionsForValue(optionString, this.props.options),\n      selection: formInputOptionString,\n      entryValue: optionString,\n      showResults: false,\n    });\n    return this.props.onOptionSelected && this.props.onOptionSelected(option, event);\n  }\n\n  @bind\n  private onTextEntryUpdated() {\n    if (!this.inputElement) throw new Error('No input element');\n    const value = this.inputElement.value;\n    this.setState({\n      searchResults: this.getOptionsForValue(value, this.props.options),\n      selection: '',\n      entryValue: value,\n    });\n  }\n\n  @bind\n  private onEnter(event: React.KeyboardEvent<HTMLInputElement>) {\n    const selection = this.getSelection();\n    if (!selection) {\n      return this.props.onKeyDown && this.props.onKeyDown(event);\n    }\n    return this.onOptionSelected(selection, event);\n  }\n\n  @bind\n  private onEscape() {\n    this.setState({\n      selectionIndex: undefined,\n    });\n  }\n\n  @bind\n  private onTab(event: React.KeyboardEvent<HTMLInputElement>) {\n    const selection = this.getSelection();\n    let option = selection ?\n      selection : (this.state.searchResults.length > 0 ? this.state.searchResults[0] : undefined);\n\n    if (option === undefined && this.hasCustomValue()) {\n      option = this.getCustomValue();\n    }\n\n    if (option !== undefined) {\n      return this.onOptionSelected(option, event);\n    }\n  }\n\n  eventMap() {\n    const events: any = {};\n\n    events[KeyEvent.DOM_VK_UP] = this.navUp;\n    events[KeyEvent.DOM_VK_DOWN] = this.navDown;\n    events[KeyEvent.DOM_VK_RETURN] = events[KeyEvent.DOM_VK_ENTER] = this.onEnter;\n    events[KeyEvent.DOM_VK_ESCAPE] = this.onEscape;\n    events[KeyEvent.DOM_VK_TAB] = this.onTab;\n\n    return events;\n  }\n\n  private nav(delta: number) {\n    if (!this.hasHint()) {\n      return;\n    }\n    const { selectionIndex, searchResults } = this.state;\n    const { maxVisible } = this.getProps();\n    let newIndex = selectionIndex === undefined ? \n      (delta === 1 ? 0 : delta) : selectionIndex + delta;\n    let length = maxVisible ? searchResults.slice(0, maxVisible).length : searchResults.length;\n    if (this.hasCustomValue()) {\n      length += 1;\n    }\n\n    if (newIndex < 0) {\n      newIndex += length;\n    } else if (newIndex >= length) {\n      newIndex -= length;\n    }\n\n    this.setState({ selectionIndex: newIndex });\n  }\n\n  navDown() {\n    this.nav(1);\n  }\n\n  navUp() {\n    this.nav(-1);\n  }\n\n  @bind\n  private onChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { onChange } = this.getProps();\n    if (onChange) {\n      onChange(event);\n    }\n\n    this.onTextEntryUpdated();\n  }\n\n  @bind\n  private onKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {\n    // If there are no visible elements, don't perform selector navigation.\n    // Just pass this up to the upstream onKeydown handler.\n    // Also skip if the user is pressing the shift key, \n    // since none of our handlers are looking for shift\n    if (!this.hasHint() || event.shiftKey) {\n      return this.props.onKeyDown && this.props.onKeyDown(event);\n    }\n\n    const handler = this.eventMap()[event.keyCode];\n\n    if (handler) {\n      handler(event);\n    } else {\n      return this.props.onKeyDown && this.props.onKeyDown(event);\n    }\n    // Don't propagate the keystroke back to the DOM/browser\n    event.preventDefault();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const searchResults = this.getOptionsForValue(this.state.entryValue, nextProps.options);\n    const showResults = Boolean(searchResults.length) && this.state.isFocused;\n    this.setState({ searchResults, showResults });\n  }\n\n  render() {\n    const { customClasses: { input }, className } = this.getProps();\n    const inputClasses: any = {};\n    if (input) {\n      inputClasses[input] = true;\n    }\n    const inputClassList = classNames(inputClasses);\n\n    const classes: any = {\n      typeahead: this.props.defaultClassNames,\n    };\n    if (className) {\n      classes[className] = true;\n    }\n    const classList = classNames(classes);\n\n    return (\n      <div className={classList}>\n        {this.renderHiddenInput()}\n        <Input \n          innerRef={(c: HTMLInputElement) => {\n            this.inputElement = c;\n            this.props.innerRef && this.props.innerRef(c);\n          }}\n          type={this.props.textarea ? 'textarea' : 'text'}\n          disabled={this.props.disabled}\n          {...this.props.inputProps}\n          placeholder={this.props.placeholder}\n          className={inputClassList}\n          value={this.state.entryValue}\n          onChange={this.onChange}\n          onKeyDown={this.onKeyDown}\n          onKeyPress={this.props.onKeyPress}\n          onKeyUp={this.props.onKeyUp}\n          onFocus={this.onFocus}\n          onBlur={this.onBlur}\n        />\n        {this.state.showResults && this.renderIncrementalSearchResults()}\n      </div>\n    );\n  }\n\n  @bind\n  private onFocus(event: React.FocusEvent<HTMLInputElement>) {\n    this.setState({ isFocused: true, showResults: true }, () => {\n      this.onTextEntryUpdated();\n    });\n    if (this.props.onFocus) {\n      return this.props.onFocus(event);\n    }\n  }\n\n  @bind\n  private onBlur(event: React.FocusEvent<HTMLInputElement>) {\n    this.setState({ isFocused: false }, () => {\n      this.onTextEntryUpdated();\n    });\n    if (this.props.onBlur) {\n      return this.props.onBlur(event);\n    }\n  }\n\n  private renderHiddenInput() {\n    const { name } = this.getProps();\n    if (!name) {\n      return null;\n    }\n\n    return (\n      <input\n        type=\"hidden\"\n        name={name}\n        value={this.state.selection}\n      />\n    );\n  }\n\n  private generateSearchFunction() {\n    const { searchOptions, filterOption } = this.getProps();\n    if (typeof searchOptions === 'function') {\n      if (filterOption !== null) {\n        console.warn('searchOptions prop is being used, filterOption prop will be ignored');\n      }\n      return searchOptions;\n    } \n    \n    if (typeof filterOption === 'function') {\n      return (value: string, options: string[]) => {\n        return options.filter(o => filterOption(value, o));\n      };\n    }\n    \n    let mapper: (input: any) => string;\n    if (typeof filterOption === 'string') {\n      mapper = Accessor.generateAccessor(filterOption);\n    } else {\n      mapper = Accessor.IDENTITY_FN;\n    }\n    return (value: string, options: string[]) => {\n      const fuzzyOpt: FilterOptions<any> = { extract: mapper };\n      return fuzzy\n        .filter(value, options, fuzzyOpt)\n        .map((res: { index: number }) => options[res.index]);\n    };\n  }\n\n  private hasHint() {\n    return this.state.searchResults.length > 0 || this.hasCustomValue();\n  }\n}\n\nexport default Typeahead;\n","import * as React from 'react';\nimport classNames from 'classnames';\n\nexport interface Props {\n  className?: string;\n  name: string;\n  children: React.ReactNode | string;\n  object: string | object;\n  onRemove: Function;\n  value: string;\n  key?: string | number;\n}\n\n/**\n * Encapsulates the rendering of an option that has been \"selected\" in a\n * TypeaheadTokenizer\n */ \nclass Token extends React.Component<Props> {\n  \n  render() {\n    const className = classNames([\n      'typeahead-token',\n      this.props.className,\n    ]);\n\n    return (\n      <div className={className} key={this.props.key}>\n        {this.renderHiddenInput()}\n        {this.props.children}\n        {this.renderCloseButton()}\n      </div>\n    );\n  }\n\n  private renderHiddenInput() {\n    const { name, value, object } = this.props;\n    // If no name was set, don't create a hidden input\n    if (!name) {\n      return null;\n    }\n\n    const hiddenValue = value || object;\n    if (typeof hiddenValue !== 'string') {\n      throw new Error('Expected either string value or string object');\n    }\n    return (\n      <input\n        type=\"hidden\"\n        name={name + '[]'}\n        value={hiddenValue}\n      />\n    );\n  }\n\n  renderCloseButton() {\n    if (!this.props.onRemove) {\n      return '';\n    }\n\n    return (\n      <a\n        className={this.props.className || 'typeahead-token-close'} \n        href=\"#\" \n        onClick={(event: React.MouseEvent<HTMLAnchorElement>) => {\n          this.props.onRemove(this.props.object);\n          event.preventDefault();\n        }}\n      >\n        &#x00d7;\n      </a>);\n  }\n}\n\nexport default Token;\n","import * as React from 'react';\nimport Accessor from '../accessor';\nimport Token from './token';\nimport KeyEvent from '../keyevent';\nimport Typeahead from '../typeahead';\nimport classNames from 'classnames';\nimport { InputProps } from 'reactstrap';\nimport { TokenCustomClasses } from '../types';\n\nconst arraysAreDifferent = (array1: any[], array2: any[]): boolean => {\n  if (array1.length !== array2.length) {\n    return true;\n  }\n\n  for (let i = array2.length - 1; i >= 0; i -= 1) {\n    if (array2[i] !== array1[i]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport interface Props extends InputProps {\n  name: string;\n  options: any[];\n  customClasses?: TokenCustomClasses;\n  allowCustomValues?: number;\n  defaultSelected: any[];\n  initialValue?: string;\n  placeholder?: string;\n  disabled?: boolean;\n  inputProps: object;\n  onTokenRemove?: Function;\n  onTokenAdd?: Function;\n  filterOption?: string | Function;\n  searchOptions?: Function;\n  displayOption?: string | ((arg: any) => string);\n  formInputOption?: string | ((arg: any) => string);\n  maxVisible?: number;\n  resultsTruncatedMessage?: string;\n  defaultClassNames?: boolean;\n  showOptionsWhenEmpty?: boolean;\n}\n\nexport interface State {\n  selected: string[];\n}\n\n/**\n * A typeahead that, when an option is selected, instead of simply filling\n * the text entry widget, prepends a renderable \"token\", that may be deleted\n * by pressing backspace on the beginning of the line with the keyboard.\n */\nclass TypeaheadTokenizer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { defaultSelected = [] } = props;\n    this.state = {\n      // We need to copy this to avoid incorrect sharing\n      // of state across instances (e.g., via getDefaultProps())\n      selected: defaultSelected.slice(0),\n    };\n  }\n\n  private getProps() {\n    const customClasses: TokenCustomClasses = {};\n    return {\n      ...{\n        customClasses,\n        allowCustomValues: 0,\n        disabled: false,\n        inputProps: {},\n        defaultClassNames: true,\n        displayOption: (token: any) => token,\n        showOptionsWhenEmpty: false,\n      },\n      ...this.props,\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    // if we get new defaultProps, update selected\n    if (arraysAreDifferent(this.props.defaultSelected, nextProps.defaultSelected)) {\n      this.setState({ selected: nextProps.defaultSelected.slice(0) });\n    }\n  }\n\n  typeaheadElement?: HTMLInputElement;\n  focus() {\n    if (!this.typeaheadElement) throw new Error('No typeahead element');\n    this.typeaheadElement.focus();\n  }\n\n  getSelectedTokens() {\n    return this.state.selected;\n  }\n\n  // TODO: Support initialized tokens\n  //\n  private renderTokens() {\n    const { \n      customClasses: { token }, displayOption, formInputOption, name,\n    } = this.getProps();\n    const tokenClasses: any = {};\n    if (token) tokenClasses[token] = true;\n    const classList: string = classNames(tokenClasses);\n\n    const result = this.state.selected\n      .map((selected) => {\n        const displayString = Accessor.valueForOption(displayOption, selected);\n        const value = Accessor.valueForOption(formInputOption || displayOption, selected);\n        if (!displayString || !value) throw new Error('Expected string and value to exist');\n\n        const key: string = displayString;\n        return (\n          <Token \n            key={key} \n            className={classList}\n            onRemove={this.removeTokenForValue}\n            object={selected}\n            value={value}\n            name={name}\n          >\n            {displayString}\n          </Token>\n        );\n      });\n    return result;\n  }\n\n  private getOptionsForTypeahead() {\n    // return this.props.options without this.selected\n    return this.props.options;\n  }\n\n  private onKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {\n    // We only care about intercepting backspaces\n    if (event.keyCode === KeyEvent.DOM_VK_BACK_SPACE) {\n      return this.handleBackspace(event);\n    }\n    this.props.onKeyDown && this.props.onKeyDown(event);\n  }\n\n  private handleBackspace(event: React.KeyboardEvent<HTMLInputElement>) {\n    // No tokens\n    if (!this.state.selected.length) {\n      return;\n    }\n\n    // Remove token ONLY when bksp pressed at beginning of line\n    // without a selection\n    if (!this.typeaheadElement) throw new Error('Expected typeahead element to exist');\n    if (this.typeaheadElement.selectionStart === this.typeaheadElement.selectionEnd &&\n        this.typeaheadElement.selectionStart === 0) {\n      this.removeTokenForValue(\n        this.state.selected[this.state.selected.length - 1]);\n      event.preventDefault();\n    }\n  }\n\n  private removeTokenForValue(value: string) {\n    const index = this.state.selected.indexOf(value);\n    if (index === -1) {\n      return;\n    }\n\n    this.state.selected.splice(index, 1);\n    this.setState({ selected: this.state.selected });\n    this.props.onTokenRemove && this.props.onTokenRemove(value);\n    return;\n  }\n\n  private addTokenForValue(value: string) {\n    let { selected } = this.state;\n    if (selected.indexOf(value) !== -1) {\n      return;\n    }\n    selected = [...selected, value];\n    this.setState({ selected });\n    \n    if (!this.typeaheadElement) throw new Error('Expected typahead to be set');\n\n    this.typeaheadElement.value = '';\n    this.props.onTokenAdd && this.props.onTokenAdd(value);\n  }\n\n  render() {\n    const { \n      className, customClasses = {}, disabled, inputProps,\n      allowCustomValues, initialValue = '',\n      maxVisible, resultsTruncatedMessage, placeholder,\n      onKeyPress, onKeyUp, onFocus, onBlur,\n      displayOption, defaultClassNames, filterOption, searchOptions,\n      showOptionsWhenEmpty,\n    } = this.getProps();\n    const classes: any = {};\n    const { typeahead } = customClasses;\n    if (typeahead) {\n      classes[typeahead] = true;\n    }\n    const classList:any = classNames(classes);\n    const tokenizerClasses: string[] = [];\n    if (defaultClassNames) {\n      tokenizerClasses.push('typeahead-tokenizer');\n    }\n    if (className) {\n      tokenizerClasses.push(className);\n    }\n    const tokenizerClassList = classNames(tokenizerClasses);\n\n    const args2Pass = {\n      placeholder,\n      disabled,\n      inputProps,\n      customClasses,\n      allowCustomValues,\n      initialValue,\n      maxVisible,\n      resultsTruncatedMessage,\n      onKeyPress,\n      onKeyUp,\n      onFocus,\n      onBlur,\n      displayOption,\n      defaultClassNames,\n      filterOption,\n      searchOptions,\n      showOptionsWhenEmpty,\n    };\n\n    return (\n      <div className={tokenizerClassList}>\n        {this.renderTokens()}\n        <Typeahead \n          innerRef={(c: HTMLInputElement) => this.typeaheadElement = c}\n          className={classList}\n          {...args2Pass}\n          options={this.getOptionsForTypeahead()}\n          onOptionSelected={this.addTokenForValue}\n          onKeyDown={this.onKeyDown}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TypeaheadTokenizer;\n"],"names":["constants","bind","target","propertyKey","descriptor","value","typeOfFunction","TypeError","configurable","boolTrue","get","bound","this","Object","defineProperty","writable","exports","Accessor","input","field","object","prop","generateAccessor","IDENTITY_FN","option","Error","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","apply","key","call","join","module","window","props","_super","_this","onClick","tslib_1.__extends","TypeaheadOption","customClasses","hover","event","preventDefault","_a","children","customValue","listItem","_b","customAdd","Boolean","classList","React.createElement","className","onMouseDown","href","getClasses","typeahead-option","listAnchor","React.Component","TypeaheadSelector","allowCustomValues","onOptionSelected","defaultClassNames","options","displayOption","selectionIndex","areResultsTruncated","resultsTruncatedMessage","typeahead-selector","resClass","customValueComponent","customValueOffset","results","map","result","displayString","resultsTruncatedClasses","results-truncated","resultsTruncated","resultsTruncatedClassList","KeyEvent","DOM_VK_UP","DOM_VK_DOWN","DOM_VK_BACK_SPACE","DOM_VK_RETURN","DOM_VK_ENTER","DOM_VK_ESCAPE","DOM_VK_TAB","fuzzy","simpleFilter","pattern","array","filter","str","test","match","opts","ch","patternIdx","len","totalScore","currScore","pre","post","compareString","caseSensitive","toLowerCase","idx","Infinity","rendered","score","arr","reduce","prev","element","extract","string","index","original","sort","a","b","compare","state","searchResults","getOptionsForValue","initialValue","entryValue","selection","undefined","isFocused","showResults","Typeahead","disabled","textarea","customListComponent","showOptionsWhenEmpty","emptyValue","trim","shouldSkipSearch","generateSearchFunction","searchOptions","inputElement","onTextEntryUpdated","focus","indexOf","hasCustomValue","maxVisible","truncated","innerRef","c","selectElement","slice","getCustomValue","generateOptionToStringFor","formInputOption","optionString","inputDisplayOption","formInputOptionString","setState","getSelection","onKeyDown","events","navUp","navDown","onEnter","onEscape","onTab","delta","hasHint","newIndex","nav","onChange","shiftKey","handler","eventMap","keyCode","nextProps","inputClasses","inputClassList","typeahead","renderHiddenInput","Input","type","inputProps","placeholder","onKeyPress","onKeyUp","onFocus","onBlur","renderIncrementalSearchResults","name","mapper","filterOption","console","warn","o","res","tslib_1.__decorate","Token","renderCloseButton","hiddenValue","onRemove","selected","TypeaheadTokenizer","token","array1","array2","arraysAreDifferent","defaultSelected","typeaheadElement","tokenClasses","valueForOption","removeTokenForValue","handleBackspace","selectionStart","selectionEnd","splice","onTokenRemove","onTokenAdd","_c","tokenizerClasses","tokenizerClassList","args2Pass","renderTokens","getOptionsForTypeahead","addTokenForValue"],"mappings":"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"}